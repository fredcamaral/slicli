name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '*.md'
      - 'themes/README.md'
      - 'examples/*/README.md'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '*.md'
      - 'themes/README.md'
      - 'examples/*/README.md'

jobs:
  validate-markdown:
    name: Validate Markdown
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install markdownlint-cli
      run: npm install -g markdownlint-cli

    - name: Lint markdown files
      run: |
        # Create markdownlint config
        cat > .markdownlint.json << 'EOF'
        {
          "MD013": { "line_length": 120 },
          "MD033": false,
          "MD041": false
        }
        EOF
        
        # Lint all markdown files
        markdownlint "**/*.md" --ignore node_modules --ignore .git

  check-links:
    name: Check Links
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install markdown-link-check
      run: npm install -g markdown-link-check

    - name: Check links in README
      run: |
        # Create config for link checking
        cat > .markdown-link-check.json << 'EOF'
        {
          "ignorePatterns": [
            {
              "pattern": "^http://localhost"
            },
            {
              "pattern": "^https://github.com/fredcamaral/slicli/issues"
            },
            {
              "pattern": "^https://github.com/fredcamaral/slicli/discussions"
            }
          ],
          "timeout": "10s",
          "retryOn429": true,
          "retryCount": 3,
          "fallbackOnRedirect": false
        }
        EOF
        
        # Check main documentation files
        markdown-link-check README.md -c .markdown-link-check.json
        markdown-link-check CLAUDE.md -c .markdown-link-check.json || true
        
        # Check theme documentation
        if [ -f "themes/README.md" ]; then
          markdown-link-check themes/README.md -c .markdown-link-check.json
        fi
        
        # Check example documentation
        find examples -name "README.md" -exec markdown-link-check {} -c .markdown-link-check.json \; || true

  spell-check:
    name: Spell Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install cspell
      run: npm install -g cspell

    - name: Create cspell config
      run: |
        cat > .cspell.json << 'EOF'
        {
          "version": "0.2",
          "language": "en",
          "words": [
            "slicli", "SliCLI", "fredcamaral", "Goldmark", "Cobra", "Mermaid",
            "golang", "PostgreSQL", "BlueMonday", "XSS", "CORS", "WebSocket",
            "JWT", "TOML", "YAML", "UUID", "CLI", "API", "HTTP", "JSON",
            "CSS", "HTML", "JS", "PDF", "PNG", "JPEG", "SVG", "GIF",
            "AMD64", "ARM64", "GOOS", "GOARCH", "CGO", "LDFLAGS",
            "codecov", "gosec", "golangci", "staticcheck", "govulncheck",
            "Dockerfile", "Kubernetes", "GitHub", "GitLab", "Bitbucket",
            "middleware", "plugin", "plugins", "renderer", "parser",
            "sanitization", "traversal", "localhost", "darkmode", "lightmode",
            "viewport", "breakpoint", "breakpoints", "hexagonal", "DDD",
            "microservice", "microservices", "RESTful", "GraphQL",
            "WCAG", "accessibility", "analytics", "telemetry", "observability"
          ],
          "flagWords": [],
          "ignorePaths": [
            "node_modules/**",
            ".git/**",
            "**/*.go",
            "**/*.js",
            "**/*.css",
            "**/*.toml",
            "**/*.yaml",
            "**/*.yml",
            "**/*.json",
            "**/go.sum",
            "LICENSE"
          ]
        }
        EOF

    - name: Run spell check
      run: |
        cspell "**/*.md" --config .cspell.json || true

  documentation-test:
    name: Documentation Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'

    - name: Build project
      run: make build

    - name: Test README examples
      run: |
        # Test basic commands from README
        ./bin/slicli --version
        ./bin/slicli --help
        
        # Test quick start example
        echo "# Hello World

        Welcome to SliCLI!" > test-readme.md
        
        # Test serve command (basic functionality)
        timeout 5s ./bin/slicli serve test-readme.md --port 8083 --no-browser &
        SERVER_PID=$!
        sleep 2
        
        # Check if server responds
        curl -f http://localhost:8083/ || exit 1
        
        # Kill server
        kill $SERVER_PID || true
        
        rm test-readme.md
        echo "README examples work correctly"

    - name: Test CLAUDE.md examples
      run: |
        # Test development commands from CLAUDE.md
        make fmt
        make vet
        
        # Test plugin examples if they exist
        if [ -d "plugins" ]; then
          make build-plugins || echo "Plugin build failed, but continuing"
        fi
        
        echo "CLAUDE.md examples work correctly"

  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'

    - name: Install godoc
      run: go install golang.org/x/tools/cmd/godoc@latest

    - name: Generate Go documentation
      run: |
        mkdir -p docs/api
        
        # Generate package documentation
        echo "# API Documentation" > docs/api/README.md
        echo "" >> docs/api/README.md
        echo "Auto-generated Go package documentation." >> docs/api/README.md
        echo "" >> docs/api/README.md
        echo "Generated on: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> docs/api/README.md

    - name: Generate plugin documentation
      run: |
        mkdir -p docs/plugins
        
        echo "# Plugin Documentation" > docs/plugins/README.md
        echo "" >> docs/plugins/README.md
        echo "## Available Plugins" >> docs/plugins/README.md
        echo "" >> docs/plugins/README.md
        
        for plugin_dir in plugins/*/; do
          if [ -d "$plugin_dir" ]; then
            plugin_name=$(basename "$plugin_dir")
            echo "### $plugin_name" >> docs/plugins/README.md
            echo "" >> docs/plugins/README.md
            
            if [ -f "$plugin_dir/README.md" ]; then
              echo "See [plugin documentation](../../plugins/$plugin_name/README.md)" >> docs/plugins/README.md
            else
              echo "No documentation available." >> docs/plugins/README.md
            fi
            echo "" >> docs/plugins/README.md
          fi
        done

    - name: Commit generated docs
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/ || true
        git commit -m "docs: auto-generate documentation" || exit 0
        git push