name: Plugin CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'plugins/**'
      - '.github/workflows/plugins.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'plugins/**'
      - '.github/workflows/plugins.yml'

env:
  GO_VERSION: '1.24.4'

jobs:
  detect-changes:
    name: Detect Plugin Changes
    runs-on: ubuntu-latest
    outputs:
      plugins: ${{ steps.changes.outputs.plugins }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changed plugins
      id: changes
      run: |
        # Get changed files
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
        else
          CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD)
        fi
        
        # Find changed plugins
        CHANGED_PLUGINS=""
        for file in $CHANGED_FILES; do
          if [[ $file == plugins/* ]]; then
            plugin_name=$(echo $file | cut -d'/' -f2)
            if [[ -d "plugins/$plugin_name" && -f "plugins/$plugin_name/Makefile" ]]; then
              if ! echo "$CHANGED_PLUGINS" | grep -q "$plugin_name"; then
                CHANGED_PLUGINS="$CHANGED_PLUGINS $plugin_name"
              fi
            fi
          fi
        done
        
        # Convert to JSON array
        if [ -n "$CHANGED_PLUGINS" ]; then
          PLUGINS_JSON=$(echo $CHANGED_PLUGINS | tr ' ' '\n' | grep -v '^$' | jq -R . | jq -s .)
        else
          PLUGINS_JSON="[]"
        fi
        
        echo "plugins=$PLUGINS_JSON" >> $GITHUB_OUTPUT
        echo "Changed plugins: $PLUGINS_JSON"

  test-plugins:
    name: Test Plugins
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.plugins != '[]'
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.detect-changes.outputs.plugins) }}
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-plugin-${{ hashFiles('plugins/${{ matrix.plugin }}/go.sum', 'go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-plugin-
          ${{ runner.os }}-go-

    - name: Test plugin
      working-directory: plugins/${{ matrix.plugin }}
      run: |
        # Download dependencies if go.mod exists
        if [ -f "go.mod" ]; then
          go mod download
          go mod verify
        fi
        
        # Run tests
        make test

    - name: Format check
      working-directory: plugins/${{ matrix.plugin }}
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi

    - name: Vet
      working-directory: plugins/${{ matrix.plugin }}
      run: make vet

    - name: Lint
      working-directory: plugins/${{ matrix.plugin }}
      run: |
        if command -v golangci-lint >/dev/null 2>&1; then
          make lint
        else
          echo "golangci-lint not available, skipping lint"
        fi

    - name: Security scan
      working-directory: plugins/${{ matrix.plugin }}
      run: |
        if command -v gosec >/dev/null 2>&1; then
          make security
        else
          echo "gosec not available, skipping security scan"
        fi

  build-plugins:
    name: Build Plugins
    runs-on: ubuntu-latest
    needs: [detect-changes, test-plugins]
    if: needs.detect-changes.outputs.plugins != '[]'
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.detect-changes.outputs.plugins) }}
        os: [linux, darwin]  # Plugins only work on Linux and macOS
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build plugin
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 1
      working-directory: plugins/${{ matrix.plugin }}
      run: |
        echo "Building plugin ${{ matrix.plugin }} for ${{ matrix.os }}/${{ matrix.arch }}"
        make build

    - name: Test plugin loading
      if: matrix.os == 'linux' && matrix.arch == 'amd64'
      working-directory: plugins/${{ matrix.plugin }}
      run: |
        # Check if the plugin exports the required symbol
        if [ -f "build/${{ matrix.plugin }}.so" ]; then
          echo "Checking plugin symbols..."
          nm -D "build/${{ matrix.plugin }}.so" | grep -q "Plugin" || {
            echo "ERROR: Plugin does not export 'Plugin' symbol"
            exit 1
          }
          echo "Plugin symbols OK"
        else
          echo "ERROR: Plugin binary not found"
          exit 1
        fi

    - name: Upload plugin artifacts
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: plugin-${{ matrix.plugin }}-${{ matrix.os }}-${{ matrix.arch }}
        path: plugins/${{ matrix.plugin }}/build/*.so
        retention-days: 7

  integration-test:
    name: Integration Test with SliCLI
    runs-on: ubuntu-latest
    needs: [detect-changes, build-plugins]
    if: needs.detect-changes.outputs.plugins != '[]'
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.detect-changes.outputs.plugins) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build SliCLI
      run: make build

    - name: Build plugin
      working-directory: plugins/${{ matrix.plugin }}
      run: make build

    - name: Create test presentation
      run: |
        mkdir -p test-integration
        cat > test-integration/test.md << 'EOF'
        ---
        title: "Plugin Integration Test"
        author: "CI"
        ---
        
        # Plugin Test
        
        Testing plugin: ${{ matrix.plugin }}
        
        ```${{ matrix.plugin }}
        test content
        ```
        EOF

    - name: Test plugin integration
      working-directory: test-integration
      run: |
        # Copy plugin to local plugins directory
        mkdir -p ~/.config/slicli/plugins
        cp ../plugins/${{ matrix.plugin }}/build/*.so ~/.config/slicli/plugins/ || true
        
        # Test serve command (start server and check it responds)
        timeout 10s ../bin/slicli serve test.md --port 8081 --no-browser &
        SERVER_PID=$!
        sleep 3
        
        # Check if server is responding
        curl -f http://localhost:8081/ || exit 1
        
        # Kill server
        kill $SERVER_PID || true
        
        echo "Integration test passed for plugin ${{ matrix.plugin }}"

  plugin-compatibility:
    name: Plugin Compatibility Matrix
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.plugins != '[]'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build SliCLI
      run: make build

    - name: Test all plugins together
      run: |
        # Build all plugins
        make build-plugins
        
        # Create test with multiple plugins
        cat > multi-plugin-test.md << 'EOF'
        ---
        title: "Multi-Plugin Test"
        ---
        
        # Multiple Plugin Test
        
        ## Syntax Highlighting
        ```go
        package main
        
        import "fmt"
        
        func main() {
            fmt.Println("Hello, World!")
        }
        ```
        
        ## Mermaid Diagram
        ```mermaid
        graph TD
            A[Start] --> B[Process]
            B --> C[End]
        ```
        
        ## Code Execution
        ```bash exec
        echo "Plugin compatibility test"
        ```
        EOF
        
        # Test serve with all plugins
        timeout 10s ./bin/slicli serve multi-plugin-test.md --port 8082 --no-browser &
        SERVER_PID=$!
        sleep 3
        
        # Check if server is responding
        curl -f http://localhost:8082/ || exit 1
        
        # Kill server
        kill $SERVER_PID || true
        
        echo "Multi-plugin compatibility test passed"