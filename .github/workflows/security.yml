name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  GO_VERSION: '1.24.4'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  gosec:
    name: GoSec Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run GoSec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'

    - name: Upload SARIF file
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif

  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Check for known vulnerabilities in plugins
      run: |
        for plugin_dir in plugins/*/; do
          if [ -d "$plugin_dir" ] && [ -f "$plugin_dir/go.mod" ]; then
            plugin_name=$(basename "$plugin_dir")
            echo "Checking vulnerabilities in plugin: $plugin_name"
            cd "$plugin_dir"
            govulncheck ./...
            cd - > /dev/null
          fi
        done

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build project
      run: |
        go mod download
        make build

    - name: Build plugins
      run: |
        for plugin_dir in plugins/*/; do
          if [ -d "$plugin_dir" ] && [ -f "$plugin_dir/Makefile" ]; then
            plugin_name=$(basename "$plugin_dir")
            echo "Building plugin: $plugin_name"
            cd "$plugin_dir"
            make build || echo "Failed to build $plugin_name"
            cd - > /dev/null
          fi
        done

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        load: true
        tags: slicli:security-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'slicli:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Check main project licenses
      run: |
        echo "Checking main project dependencies..."
        go-licenses check ./cmd/slicli

    - name: Check plugin licenses
      run: |
        for plugin_dir in plugins/*/; do
          if [ -d "$plugin_dir" ] && [ -f "$plugin_dir/go.mod" ]; then
            plugin_name=$(basename "$plugin_dir")
            echo "Checking licenses for plugin: $plugin_name"
            cd "$plugin_dir"
            go-licenses check . || echo "License check failed for $plugin_name"
            cd - > /dev/null
          fi
        done

    - name: Generate license report
      run: |
        echo "# License Report" > LICENSE_REPORT.md
        echo "" >> LICENSE_REPORT.md
        echo "## Main Project Dependencies" >> LICENSE_REPORT.md
        go-licenses report ./cmd/slicli >> LICENSE_REPORT.md || true
        
        echo "" >> LICENSE_REPORT.md
        echo "## Plugin Dependencies" >> LICENSE_REPORT.md
        for plugin_dir in plugins/*/; do
          if [ -d "$plugin_dir" ] && [ -f "$plugin_dir/go.mod" ]; then
            plugin_name=$(basename "$plugin_dir")
            echo "### Plugin: $plugin_name" >> LICENSE_REPORT.md
            cd "$plugin_dir"
            go-licenses report . >> ../LICENSE_REPORT.md || echo "Failed to generate report for $plugin_name" >> ../LICENSE_REPORT.md
            cd - > /dev/null
          fi
        done

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: LICENSE_REPORT.md
        retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [gosec, vulnerability-scan, codeql-analysis, secret-scan]
    if: always()
    
    steps:
    - name: Security Summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| GoSec | ${{ needs.gosec.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Vulnerability Scan | ${{ needs.vulnerability-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scanning | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.gosec.result }}" == "failure" || "${{ needs.vulnerability-scan.result }}" == "failure" || "${{ needs.codeql-analysis.result }}" == "failure" || "${{ needs.secret-scan.result }}" == "failure" ]]; then
          echo "❌ **Security issues detected!** Please review the failed checks above." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ **All security checks passed!**" >> $GITHUB_STEP_SUMMARY
        fi