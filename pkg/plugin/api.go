// Package plugin provides the public API for slicli plugins.
// All plugins must implement the Plugin interface to be loaded by slicli.
package plugin

import (
	"context"
)

// Plugin is the interface that all slicli plugins must implement.
// Plugins are loaded as Go shared libraries (.so files) and must export
// a variable named "Plugin" that implements this interface.
type Plugin interface {
	// Name returns the unique name of the plugin.
	Name() string

	// Version returns the semantic version of the plugin.
	Version() string

	// Description returns a human-readable description of the plugin.
	Description() string

	// Init initializes the plugin with the provided configuration.
	// This is called once when the plugin is loaded.
	Init(config map[string]interface{}) error

	// Execute processes the input and returns the output.
	// The context can be used for cancellation and timeout.
	Execute(ctx context.Context, input PluginInput) (PluginOutput, error)

	// Cleanup releases any resources held by the plugin.
	// This is called when the plugin is unloaded.
	Cleanup() error
}

// PluginInput contains the data passed to a plugin for processing.
type PluginInput struct {
	// Content is the raw content to process (e.g., Mermaid diagram source).
	Content string

	// Language is a hint about the content type (e.g., "mermaid", "go", "python").
	Language string

	// Options contains plugin-specific configuration for this execution.
	Options map[string]interface{}

	// Metadata contains additional context from the presentation system.
	Metadata map[string]interface{}
}

// PluginOutput contains the result of plugin processing.
type PluginOutput struct {
	// HTML is the rendered HTML output to be inserted in the slide.
	HTML string

	// Assets contains any additional static assets generated by the plugin.
	Assets []Asset

	// Metadata contains output metadata that might be used by other plugins.
	Metadata map[string]interface{}
}

// Asset represents a static asset generated by a plugin.
type Asset struct {
	// Name is the filename of the asset (e.g., "diagram.css").
	Name string

	// Content is the raw content of the asset.
	Content []byte

	// ContentType is the MIME type of the asset (e.g., "text/css").
	ContentType string
}

// PluginInfo contains metadata about a discovered plugin.
type PluginInfo struct {
	// Name is the plugin's unique name.
	Name string

	// Version is the plugin's semantic version.
	Version string

	// Description is the plugin's human-readable description.
	Description string

	// Path is the filesystem path to the plugin's .so file.
	Path string

	// Compatible indicates if the plugin is compatible with this version of slicli.
	Compatible bool
}

// PluginError represents an error that occurred during plugin operations.
type PluginError struct {
	// Plugin is the name of the plugin that caused the error.
	Plugin string

	// Operation is the operation that failed (e.g., "load", "execute").
	Operation string

	// Err is the underlying error.
	Err error
}

func (e *PluginError) Error() string {
	if e.Err != nil {
		return "plugin " + e.Plugin + " " + e.Operation + ": " + e.Err.Error()
	}
	return "plugin " + e.Plugin + " " + e.Operation + " failed"
}

func (e *PluginError) Unwrap() error {
	return e.Err
}
